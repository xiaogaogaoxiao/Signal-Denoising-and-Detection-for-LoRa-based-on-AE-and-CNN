function layers = f_denoising_auto(M)

%% Lambda=1
%%

layers = [ imageInputLayer([2*M 2*M 1 ], "Name", "input", "Normalization","none") ...    
%% Encoder %%
%------------------------------%
% 1st convolutional and pooling
; convolution2dLayer(16,38,'Name','Conv1','Padding','same')...
; batchNormalizationLayer("Name", "bnc1") ...
; reluLayer("Name", "relu1") ...
;maxPooling2dLayer(2,'Name','Pool1','Stride',2,'Padding','same')...  

% 2nd convolutional layer and pooling
; convolution2dLayer(20,97,'Name','Conv2','Padding','same')...
; batchNormalizationLayer("Name", "bnc2") ...
; reluLayer("Name", "relu2") ...
;maxPooling2dLayer(2,'Name','Pool2','Stride',2,'Padding','same')...  

% 3rd convolutional layer and pooling
; convolution2dLayer(7,18,'Name','Conv3','Padding','same')... % 18,7
; batchNormalizationLayer("Name", "bnc3") ...
; reluLayer("Name", "relu3") ...
; maxPooling2dLayer(2,'Name','Pool3','Stride',2,'Padding','same')...

% 4th convolutional layer
; convolution2dLayer(20,45,'Name','Conv4','Padding','same')...
; batchNormalizationLayer("Name", "bnc4") ...
; reluLayer("Name", "relu4") ...

%% Decoder %%
%------------------------------%
% 5th convolutional layer and Upsampling
; transposedConv2dLayer(20,45,'Name','traCov1','Stride' ,2,'Cropping','same')...
; batchNormalizationLayer("Name", "bnc5") ...
; reluLayer("Name", "relu5") ...

% 6th convolutional layer and Upsampling
; transposedConv2dLayer(7,18,'Name','traCov2','Stride' ,2,'Cropping','same')... %18,7
; batchNormalizationLayer("Name", "bnc6") ...
; reluLayer("Name", "relu6") ...

% 7th convolutional layer and Upsampling
; transposedConv2dLayer(20,97,'Name','traCov3','Stride' ,2,'Cropping','same')...
; batchNormalizationLayer("Name", "bnc7") ...
; reluLayer("Name", "relu7") ...

% 8th convolutional layer
; convolution2dLayer(16,1,'Name','Conv5','Padding','same')...
; batchNormalizationLayer("Name", "bnc55") ...
; sigmoidLayer("Name", "sigmo")...
; regressionLayer("Name", "output") ...
];


%% Lambda=0.7  
%%
% layers = [ imageInputLayer([2*M 2*M 1 ], "Name", "input", "Normalization","none") ...    
% %% Encoder %%
% %------------------------------%
% % 1st convolutional and pooling
% ; convolution2dLayer(2,23,'Name','Conv1','Padding','same')...
% ; batchNormalizationLayer("Name", "bnc1") ...
% ; reluLayer("Name", "relu1") ...
% ;maxPooling2dLayer(2,'Name','Pool1','Stride',2,'Padding','same')...  
% 
% % 2nd convolutional layer and pooling
% ; convolution2dLayer(18,87,'Name','Conv2','Padding','same')...
% ; batchNormalizationLayer("Name", "bnc2") ...
% ; reluLayer("Name", "relu2") ...
% ;maxPooling2dLayer(2,'Name','Pool2','Stride',2,'Padding','same')...  
% 
% % 3rd convolutional layer and pooling
% ; convolution2dLayer(20,15,'Name','Conv3','Padding','same')...
% ; batchNormalizationLayer("Name", "bnc3") ...
% ; reluLayer("Name", "relu3") ...
% ; maxPooling2dLayer(2,'Name','Pool3','Stride',2,'Padding','same')...
% 
% % 4th convolutional layer
% ; convolution2dLayer(20,95,'Name','Conv4','Padding','same')...
% ; batchNormalizationLayer("Name", "bnc4") ...
% ; reluLayer("Name", "relu4") ...
% 
% %% Decoder %%
% %------------------------------%
% % 5th convolutional layer and Upsampling
% ; transposedConv2dLayer(20,95,'Name','traCov1','Stride' ,2,'Cropping','same')...
% ; batchNormalizationLayer("Name", "bnc5") ...
% ; reluLayer("Name", "relu5") ...
% 
% % 6th convolutional layer and Upsampling
% ; transposedConv2dLayer(20,15,'Name','traCov2','Stride' ,2,'Cropping','same')...
% ; batchNormalizationLayer("Name", "bnc6") ...
% ; reluLayer("Name", "relu6") ...
% 
% % 7th convolutional layer and Upsampling
% ; transposedConv2dLayer(18,87,'Name','traCov3','Stride' ,2,'Cropping','same')...
% ; batchNormalizationLayer("Name", "bnc7") ...
% ; reluLayer("Name", "relu7") ...
% 
% % 8th convolutional layer
% ; convolution2dLayer(2,1,'Name','Conv5','Padding','same')...
% ; batchNormalizationLayer("Name", "bnc55") ...
% ; sigmoidLayer("Name", "sigmo")...
% ; regressionLayer("Name", "output") ...
% ];



%% Lambda=0.25 
%%
% layers = [ imageInputLayer([2*M 2*M 1 ], "Name", "input", "Normalization","none") ...    
% %% Encoder %%
% %------------------------------%
% % 1st convolutional and pooling
% ; convolution2dLayer(4,8,'Name','Conv1','Padding','same')...
% ; batchNormalizationLayer("Name", "bnc1") ...
% ; reluLayer("Name", "relu1") ...
% ;maxPooling2dLayer(2,'Name','Pool1','Stride',2,'Padding','same')...  
% 
% % 2nd convolutional layer and pooling
% ; convolution2dLayer(15,15,'Name','Conv2','Padding','same')...
% ; batchNormalizationLayer("Name", "bnc2") ...
% ; reluLayer("Name", "relu2") ...
% ;maxPooling2dLayer(2,'Name','Pool2','Stride',2,'Padding','same')...  
% 
% % 3rd convolutional layer and pooling
% ; convolution2dLayer(7,19,'Name','Conv3','Padding','same')...
% ; batchNormalizationLayer("Name", "bnc3") ...
% ; reluLayer("Name", "relu3") ...
% ; maxPooling2dLayer(2,'Name','Pool3','Stride',2,'Padding','same')...
% 
% % 4th convolutional layer
% ; convolution2dLayer(20,39,'Name','Conv4','Padding','same')...
% ; batchNormalizationLayer("Name", "bnc4") ...
% ; reluLayer("Name", "relu4") ...
% 
% %% Decoder %%
% %------------------------------%
% % 5th convolutional layer and Upsampling
% ; transposedConv2dLayer(20,39,'Name','traCov1','Stride' ,2,'Cropping','same')...
% ; batchNormalizationLayer("Name", "bnc5") ...
% ; reluLayer("Name", "relu5") ...
% 
% % 6th convolutional layer and Upsampling
% ; transposedConv2dLayer(7,19,'Name','traCov2','Stride' ,2,'Cropping','same')...
% ; batchNormalizationLayer("Name", "bnc6") ...
% ; reluLayer("Name", "relu6") ...
% 
% % 7th convolutional layer and Upsampling
% ; transposedConv2dLayer(15,15,'Name','traCov3','Stride' ,2,'Cropping','same')...
% ; batchNormalizationLayer("Name", "bnc7") ...
% ; reluLayer("Name", "relu7") ...
% 
% % 8th convolutional layer
% ; convolution2dLayer(4,1,'Name','Conv5','Padding','same')...
% ; batchNormalizationLayer("Name", "bnc55") ...
% ; sigmoidLayer("Name", "sigmo")...
% ; regressionLayer("Name", "output") ...
% ];


